#----------------------------#
# see page 57 in Sarkka book #
#----------------------------#

function filteringrecursion(y; A = A, H = H, Q = Q, R = R, m‚ÇÄ = m‚ÇÄ, P‚ÇÄ = P‚ÇÄ)

    N = length(y)

    # Store here state distribution

    Œºstate, Œ£state = Array{Vector{Float64}}(undef, N), Array{Matrix{Float64}}(undef, N)

    # Start recursion with prior mean and prior covariance

    m‚Çñ‚Çã‚ÇÅ, P‚Çñ‚Çã‚ÇÅ = m‚ÇÄ, P‚ÇÄ

    for k in 1:N

        # prediction step

        m‚Çñ‚Åª = A * m‚Çñ‚Çã‚ÇÅ

        P‚Çñ‚Åª = A * P‚Çñ‚Çã‚ÇÅ * A' + Q     # (4.20)

        # update step

        ùêØ‚Çñ = y[k] - H * m‚Çñ‚Åª

        S‚Çñ = H * P‚Çñ‚Åª * H' + R

        K‚Çñ = (P‚Çñ‚Åª * H') / S‚Çñ

        m‚Çñ = m‚Çñ‚Åª + K‚Çñ * ùêØ‚Çñ

        P‚Çñ = P‚Çñ‚Åª - K‚Çñ * S‚Çñ * (K‚Çñ)'  # (4.21)

        # store mean and covariance of Gaussian distribution N(x‚Çñ|m‚Çñ, P‚Çñ)

        P‚Çñ = (P‚Çñ+(P‚Çñ)') / 2

        Œºstate[k], Œ£state[k] = m‚Çñ, P‚Çñ

        # next state

        m‚Çñ‚Çã‚ÇÅ, P‚Çñ‚Çã‚ÇÅ = m‚Çñ, P‚Çñ

    end

    return Œºstate, Œ£state

end


function testfiltering() # Works ‚úÖ

    yclean, y, x, A, H, Q, R, m‚ÇÄ, P‚ÇÄ = simulatedata()

    Œº, Œ£ = filteringrecursion(y; A = A, H = H, Q = Q, R = R, m‚ÇÄ = m‚ÇÄ, P‚ÇÄ = P‚ÇÄ)

    figure()

    subplot(211)
    plot([y·µ¢[1]    for y·µ¢ in yclean], label = "simulated 1 clean")
    plot([y·µ¢[1]    for y·µ¢ in y], label = "simulated 1")
    plot([(H*m)[1] for m  in Œº], label = "mean 1")
    legend()
    
    subplot(212)
    plot([y·µ¢[2]    for y·µ¢ in y], label = "simulated 2")
    plot([(H*m)[2] for m  in Œº], label = "mean 2")

    legend()

end
